# Docker Compose para produção
services:
  postgres:
    hostname: db
    image: postgres:16-alpine
    container_name: solo-energy-postgres-prod
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-solo-energia}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nook-saas-template-network

  redis:
    image: redis:7-alpine
    container_name: solo-energy-redis-prod
    volumes:
      - redis-data:/data
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nook-saas-template-network

  minio:
    image: minio/minio
    container_name: solo-energy-minio-prod
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - nook-saas-template-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: solo-energy-app-prod
    ports:
      - "3000:3000"
    environment:
      # Database
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_PORT=5432
      - DATABASE_HOST=postgres
      
      # Auth
      - JWT_SECRET=${JWT_SECRET}
      
      # Next
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      
      # Redis
      - REDIS_URL=redis://redis:6379
      
      # Email
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      
      # WhatsApp
      - WHATSAPP_PROVIDER=${WHATSAPP_PROVIDER}
      - WHATSAPP_EVOLUTION_URL=${WHATSAPP_EVOLUTION_URL}
      - WHATSAPP_EVOLUTION_API_KEY=${WHATSAPP_EVOLUTION_API_KEY}
      - WHATSAPP_EVOLUTION_INSTANCE=${WHATSAPP_EVOLUTION_INSTANCE}
      
      # API
      - API_BASE_URL=http://app:3000
      - API_RATE_LIMIT_WINDOW_MS=${API_RATE_LIMIT_WINDOW_MS}
      - API_RATE_LIMIT_MAX_REQUESTS=${API_RATE_LIMIT_MAX_REQUESTS}
      - API_SECRET_KEY=${API_SECRET_KEY}
      
      # Payment
      - PAYMENT_PROVIDER=${PAYMENT_PROVIDER}
      - NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${NEXT_PUBLIC_STRIPE_PUBLIC_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_FREE_PRICE_ID=${STRIPE_FREE_PRICE_ID}
      - STRIPE_PRO_PRICE_ID=${STRIPE_PRO_PRICE_ID}
      
      # MinIO
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_CONSOLE_PORT=9001
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_USE_SSL=false
      
      # Jobs
      - JOB_CONCURRENCY=${JOB_CONCURRENCY}
      - JOB_MAX_ATTEMPTS=${JOB_MAX_ATTEMPTS}
      - JOB_DEFAULT_TIMEOUT=${JOB_DEFAULT_TIMEOUT}
      - JOB_CLEANUP_INTERVAL=${JOB_CLEANUP_INTERVAL}
      - JOB_ENABLE_METRICS=${JOB_ENABLE_METRICS}
      
      # Node
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    networks:
      - nook-saas-template-network

networks:
  nook-saas-template-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  minio-data:
